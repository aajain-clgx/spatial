// General object for throwing Exceptions
// Includes a Factory object inside to generate correct exception type

'use strict';

var status = require('./status.js');

/** UserNotFound Error
* Descripton: Thrown if user is not found
* Severity: NonFatal   
* @class UserNotFoundError
* @constructor UserNotFoundError
* @param publickey PublicKey that was not found in the database
*/
function UserNotFoundError(publicKey){
  this.status = status.ARGUMENTS_INVALID.toString();  
  this.name = 'UserNotFound';
  this.message = 'No user found with key: ' + publicKey;
}
UserNotFoundError.prototype = new Error();
UserNotFoundError.prototype.constructor = UserNotFoundError;


/** MissingParameter Error
* Description: Thrown if a URL query string parameter is missing
* Severity: NonFatal
* @class MissingParameterError
* @constructor MissingParameterError
* @param parameter Name of the expected paramter that was missing
*/
function MissingParameterError(parameter){
  this.status = status.ARGUMENTS_INVALID.toString();
  this.name = 'ParametersMissing';
  this.message = 'Could not find paramters:"' + parameter + '" in URL';
}
MissingParameterError.prototype = new Error();
MissingParameterError.prototype.constructor = MissingParameterError;


/** InvalidParameterError
* Description: Thrown if the URL query string parameter does not meet exected type
* Severity: NonFatal
* @class InvalidParameterError
* @constructor InvalidParameterError
* @param parameter Name of the invalid parameter
*/
function InvalidParameterError(parameter){
  this.status = status.ARGUMENTS_INVALID.toString();
  this.name='InvalidArgument';
  this.message = 'Value of the parameter:"' + parameter + '" is invalid';
}
InvalidParameterError.prototype = new Error();
InvalidParameterError.prototype.constructor = InvalidParameterError;


/** InvalidTimestampError
* Description: Thrown if the timestamp paramter is more than 10 minutes old
* Severity: NonFatal
* @class InvalidTimestampError
* @constructor InvalidTimestampError
*/
function InvalidTimestampError(){
  this.status = status.ARGUMENTS_INVALID.toString();
  this.name='InvalidTimestamp';
  this.message = 'The request is more than 10 minute old';
}
InvalidTimestampError.prototype = new Error();
InvalidTimestampError.prototype.constructor = InvalidTimestampError;


/** SignatureMismatch
* Description: Thrown if the signature does not match with computed signature
* Severity: NonFatal 
* @class SignatureMismatchError
* @constructor SignatureMismatchError
*/
function SignatureMismatchError(){
  this.status = status.ARGUMENTS_INVALID.toString();
  this.name='SignatureMimatch';
  this.message = 'The signature of the request cannot be verified. Either you have invalid key or your request has been tampered with.';
}
SignatureMismatchError.prototype = new Error();
SignatureMismatchError.prototype.constructor = SignatureMismatchError;


/** MysqlError
* Description: Thrown by Mysql-node when encountering exception with MySql
* Severity: Depends on fatal parameter
* @class MysqlError
* @constructor MysqlError
* @param mysqlError Error generated from node.mysql
*/
function MysqlError(mysqlError){
  this.status = mysqlError.fatal ? status.SERVER_ERROR.toString(): status.ARGUMENTS_INVALID.toString();
  this.fatal = mysqlError.fatal;
  this.code = mysqlError.code;
  this.name = mysqlError.name;
  this.message = mysqlError.message;
}
MysqlError.prototype = new Error();
MysqlError.prototype.constructor = MysqlError;


/** SqliteError
* Description: Thrown when interacting with local Sqlite cache for Mysql
* Severity: Fatal, affects user functionality
* @class SqliteError
* @constructor SqliteError
* @param err Error generated by node.sqlite3 module
*/
function SqliteError(err){
  this.status = status.SERVER_ERROR.toString();
  this.name = err.name;
  this.message = err.message;
}
SqliteError.prototype = new Error();
SqliteError.prototype.constructor = SqliteError;


/** NoCustomQueryFound
* Description: Thrown when a Custom Request ID is not found in Mysql
* Severity: NonFatal
* @class NoCustomQueryFound
* @constructor NoCustomQueryFound
*/
function NoCustomQueryFound(publickey,requestid){
  this.status = status.ARGUMENTS_INVALID.toString();
  this.name='InvalidCustomQueryID';
  this.message = 'The custom request id:' + requestid + ' for publickey: ' + publickey + ' is invalid';
}
NoCustomQueryFound.prototype = new Error();
NoCustomQueryFound.prototype.constructor = NoCustomQueryFound;


module.exports = {
    UserNotFound: UserNotFoundError,
    MissingParameter: MissingParameterError,
    InvalidTimestamp: InvalidTimestampError,
    SignatureMismatch: SignatureMismatchError,
    InvalidParameter: InvalidParameterError,
    Mysql: MysqlError,
    Sqlite: SqliteError,
    NoCustomQueryFound: NoCustomQueryFound
  };
